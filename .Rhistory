library(RColorBrewer)
library(reshape2)
library(heatmap3)
install.packages("heatmap3")
install.packages("heatmap3")
###ALL###
#data
#virusmatrix = read.table("/Users/michealmacaogain/Dropbox/Research/Publications/63. SNF in bronchiectasis/1. LRM/Figures/Figure 3/bacteriaFungiVirusRA3reorderRenamTop20.csv", header=T,	row.names=1,sep=",")
virusmatrix = read.table("/Users/michealmacaogain/Dropbox/Research/Publications/63. SNF in bronchiectasis/1. LRM/Figures/Figure 3/bacteriaFungiVirusRA3reorderRenamTop10other.csv"
, header=T,	row.names=1,sep=",") #10 taxa
virusmatrix = as.matrix(t(virusmatrix)) #transpose to matrix
#colourmatrix
x = data.frame(
id   = c(1, 1, 2, 2),
white = c(1, 0, 1, 0),
cyan  = c(0, 1, 0, 1),
red  = c(0, 1, 0, 1)
)
# melt the data frame
melt(data = x, id.vars = "id", measure.vars = c("white", "cyan", "red"))
library(reshape2)
library(heatmap3)
library(RColorBrewer)
#colourmatrix
x = data.frame(
id   = c(1, 1, 2, 2),
white = c(1, 0, 1, 0),
cyan  = c(0, 1, 0, 1),
red  = c(0, 1, 0, 1)
)
# melt the data frame
melt(data = x, id.vars = "id", measure.vars = c("white", "cyan", "red"))
#select a colour scheme
#alternative
Colors=c("#eeeeee", "#ffff00", "#663399")
#bacteria
#Colors=c("white", "light blue", "#3590ae")
#Colors=c("white", "light blue", "#3590ae")
Colors=c("white", "#C9D6F8", "#0D2CB4") #chosen
#set a colour palette
Colors=colorRampPalette(Colors)(255)
#set Label for RowSideColors (side bar colour scheme for kingdoms)
Label =
c('#B81312','#B81312','#B81312','#B81312','#B81312','#B81312','#B81312','#B81312','#B81312','#B81312','#B81312',
'#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52','#2FAC52',
'#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4','#0D2CB4')
heatmap3(virusmatrix, showColDendro = F, showRowDendro = F,
Rowv = NA, col=Colors, scale = "col", cexCol=0.1,cexRow=0.5,
RowSideColors=Label, RowSideLabs=FALSE, labCol = FALSE,
margins=c(1,1))
heatmap3(virusmatrix, showColDendro = F, showRowDendro = F,
Rowv = NA, col=Colors, scale = "col", cexCol=0.1,cexRow=0.5,
RowSideColors=Label, RowSideLabs=FALSE, labCol = TRUE,
margins=c(1,1))
heatmap3(virusmatrix, showColDendro = F, showRowDendro = F,
Rowv = NA, col=Colors, scale = "col", cexCol=0.1,cexRow=0.5,
RowSideColors=Label, RowSideLabs=TRUE, labCol = TRUE,
margins=c(1,1))
heatmap3(virusmatrix, showColDendro = F, showRowDendro = F,
Rowv = NA, col=Colors, scale = "col", cexCol=0.1,cexRow=0.5,
RowSideColors=Label, RowSideLabs=FALSE, labCol = FALSE,
margins=c(1,1))
shiny::runApp()
PorData<-read.csv("Scores.csv", row.names = 1)
View(PorData)
View(PorData)
View(PorData)
library(DT)
library(shiny)
PorData<-read.csv("Scores.csv", row.names = 1)
basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
shinyApp(ui, server)
basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
shinyApp(ui, server)
shinyApp(ui, server)
xtable
shinyApp(ui, server)
library(xtable)
library(DT)
library(xtable)
library(DT)
library(shiny)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
install.packages('xtable')
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages(DT)
install.packages('DT')
install.packages("DT")
library(DT)
library(shiny)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
library(DT)
library(shiny)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
PorData<-read.csv("Scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
shinyApp(ui, server)
#install.packages('xtable')
#install.packages('DT')
library(DT)
library(shiny)
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
install.packages(c("ade4", "bookdown", "bslib", "cachem", "e1071", "gert", "ggsignif", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "maptools", "matrixStats", "nlme", "openssl", "packrat", "pkgload", "pROC", "R6", "RCurl", "reticulate", "RJSONIO", "rmarkdown", "roxygen2", "RSQLite", "shinyWidgets", "stringi", "survival", "tibble", "vroom", "waldo", "xfun", "XML"))
#install.packages('xtable')
#install.packages('DT')
library(DT)
library(shiny)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
shinyApp(ui, server)
runApp()
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
#install.packages('xtable')
#install.packages('DT')
library(DT)
library(shiny)
library(htmltools)
shinyApp(ui, server)
library(shiny)
#install.packages('xtable')
#install.packages('DT')
library(DT)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
detach("package:shiny", unload = TRUE)
shinyApp(ui, server)
library(shiny)
shinyApp(ui, server)
detach("package:shiny", unload = TRUE)
shiny::runApp()
detach("package:shiny", unload = TRUE)
library(base64enc)
#install.packages('xtable')
#install.packages('DT')
install.packages("base64enc")
install.packages("base64enc")
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
install.packages(shiny)
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
install.packages('shiny')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
#install.packages('shiny')
library(DT)
PorData<-read.csv("Scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shiny::runApp()
library(shiny)
runApp()
require(devtools)
install_version("shiny", version = "1.3.2", repos = "http://cran.us.r-project.org")
install_version("html_tools", version = '0.3.6', repos = "http://cran.us.r-project.org")
install_version("htmltools", version = '0.3.6', repos = "http://cran.us.r-project.org")
runApp()
detach("package:shiny", unload = TRUE)
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
#install.packages('shiny')
library(DT)
library(shiny)
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
#install.packages('shiny')
library(DT)
library(shiny)
shiny::runApp()
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
#install.packages('shiny')
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
install.packages("htmltools")
runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
library(shiny)
#install.packages('xtable')
#install.packages('DT')
#install.packages("base64enc")
install.packages('shiny')
shiny::runApp()
library(shiny)
install.packages("shiny")
shiny::runApp()
require(devtools)
runApp()
runApp()
detach("package:shiny", unload = TRUE)
shiny::runApp()
runApp()
shiny::runApp()
DT::renderDataTable
renderDataTable
View(PorData)
shinyApp(ui, server)
library(DT)
library(shiny)
require(devtools) #added devtools to try and ensure DT:: command was followed
PorData<-read.csv("scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
library(DT)
library(shiny)
require(devtools) #added devtools to try and ensure DT:: command was followed
PorData<-read.csv("scores.csv", row.names = 1)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
View(PorData)
shinyApp(ui, server)
write.csv(thedf, "scores.csv", encoding="UTF-8")
PorData<-readr::read_csv("scores.csv", row.names = 1)
PorData<-readr::read_csv("scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
View(PorData)
PorData<-readr::read_csv("scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
runApp()
PorData<-readr::read_csv("scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
runApp()
shinyApp(ui, server)
PorData<-readr::read_csv("scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
library(DT)
library(shiny)
require(devtools) #added devtools to try and ensure DT:: command was followed
PorData<-readr::read_csv("scores.csv")
PorData<-readr::read_csv("scores.csv", encoding = "UTF-8")
PorData<-readr::read_csv("scores.csv", encoding = "UTF-8")
locale()
library(tidyverse)
locale()
PorData<-readr::read_csv("scores.csv", encoding = "UTF-8")
PorData<-readr::read_csv("scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
PorData<-readr::read_csv("Scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
locale()
write.csv(PorData, "Scores_.csv", fileEncoding = "UTF-8")
PorData
PorData<-readr::read_csv("scores.csv")
#PorData<-read.csv("scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
PorData<-readr::read_csv("Scores.csv")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
write.csv(PorData, "Scores_.csv", fileEncoding = "UTF-8")
write.csv(PorData, "Scores_.csv", fileEncoding = "UTF-8")
PorData<-readr::read_csv("Scores.csv") %>%
as.data.frame()
write.csv(PorData, "Scores_.csv", fileEncoding = "UTF-8")
shinyApp(ui, server)
PorData<-readr::read_csv("Scores.csv", encoding="UTF-8") %>%
as.data.frame()
PorData<-read.table("Scores.csv",encoding="UTF-8")
PorData<-read.table("Scores.csv")
PorData<-read.csv("Scores.csv",encoding="UTF-8")
PorData
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
#library(shiny)
PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("scores.csv")
#PorData<-read.csv("scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
shinyApp(ui, server)
locale()
#PorData<-readr::read_csv("Scores.csv", encoding="UTF-8") %>%
#as.data.frame()
PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("Scores.csv", encoding="UTF-8") %>%
#as.data.frame()
PorData<-read.csv("Scores.csv",encoding="UTF-8")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
#library(shiny)
PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("scores.csv")
#PorData<-read.csv("scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
shinyApp(ui, server)
PorData$Data_source<-PorData$Gene
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
View(PorData)
#PorData<-readr::read_csv("Scores.csv", encoding="UTF-8") %>%
#as.data.frame()
PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("Scores.csv", encoding="UTF-8") %>%
#as.data.frame()
PorData<-read.csv("Scores.csv",encoding="UTF-8")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
#library(shiny)
#PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("scores.csv")
PorData<-read.csv("scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
#library(shiny)
#PorData<-read.csv("Scores.csv",encoding="UTF-8")
#PorData<-readr::read_csv("scores.csv")
PorData<-read.csv("scores.csv", row.names = 1)
ui<-basicPage(
h2("PorphyriaDB - Biochemical Genetics Laboratory, St. James's Hospital "),
DT::dataTableOutput("mytable")
)
#PorData<-readr::read_csv("Scores.csv", encoding="UTF-8")
PorData<-read.csv("Scores.csv",encoding="UTF-8")
server <- function(input, output) {
output$mytable = DT::renderDataTable({
PorData
})
}
shinyApp(ui, server)
